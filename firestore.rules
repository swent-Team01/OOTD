/**
 * FIRESTORE SECURITY RULES
 *
 * Users: Authenticated users can read any user profile, write only their own
 * Posts: Visible to author OR mutual friends; only author can modify
 */

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthed() {
      return request.auth != null;
    }

    function isSelf(uid) {
      return isAuthed() && request.auth.uid == uid;
    }

    // Mutual friendship check using friendUids lists on both users
    function isFriend(viewerUid, authorUid) {
      // Paths
      let viewerPath = /databases/$(database)/documents/users/$(viewerUid);
      let authorPath = /databases/$(database)/documents/users/$(authorUid);

      // Ensure both docs exist and expose friendUids list
      return exists(viewerPath) && exists(authorPath)
        && get(viewerPath).data.keys().hasAny(['friendUids'])
        && (authorUid in get(viewerPath).data.friendUids)
    }

    // Users: read any, write own
    match /users/{userId} {
      allow read: if isAuthed();
      allow write: if isSelf(userId);
    }

    // Posts: readable by author or mutual friends
    match /posts/{postId} {
      allow read: if isAuthed() &&
                  (resource.data.uid == request.auth.uid ||
                   isFriend(request.auth.uid, resource.data.uid));

      allow create: if isAuthed()
        && request.resource.data.uid == request.auth.uid
        // && request.resource.data.postUID == postId

      allow update: if isAuthed()
        && resource.data.uid == request.auth.uid

      allow delete: if isSelf(resource.data.uid);
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}