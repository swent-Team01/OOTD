package com.android.ootd.ui.post

import android.content.Context
import android.net.Uri
import androidx.test.core.app.ApplicationProvider
import com.android.ootd.model.items.FirebaseImageUploader
import com.android.ootd.model.items.ImageData
import com.android.ootd.model.items.Item
import com.android.ootd.model.items.ItemsRepository
import com.android.ootd.model.items.Material
import io.mockk.coEvery
import io.mockk.coVerify
import io.mockk.every
import io.mockk.mockk
import io.mockk.mockkObject
import kotlin.collections.emptyList
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.test.StandardTestDispatcher
import kotlinx.coroutines.test.advanceUntilIdle
import kotlinx.coroutines.test.resetMain
import kotlinx.coroutines.test.runTest
import kotlinx.coroutines.test.setMain
import org.junit.After
import org.junit.Assert.assertEquals
import org.junit.Assert.assertFalse
import org.junit.Assert.assertNull
import org.junit.Assert.assertTrue
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import org.robolectric.RobolectricTestRunner

// Test partially generated by the AI coding agent: Claude Sonnet 4.5
@OptIn(ExperimentalCoroutinesApi::class)
@RunWith(RobolectricTestRunner::class)
class EditItemsViewModelTest {

  private lateinit var viewModel: EditItemsViewModel
  private lateinit var mockRepository: ItemsRepository
  private val testDispatcher = StandardTestDispatcher()

  @Before
  fun setup() {
    Dispatchers.setMain(testDispatcher)
    mockRepository = mockk(relaxed = true)
    viewModel = EditItemsViewModel(mockRepository)
  }

  @After
  fun tearDown() {
    Dispatchers.resetMain()
  }

  @Test
  fun `initial state is correct`() {
    val state = viewModel.uiState.value
    assertEquals("", state.itemId)
    assertEquals(ImageData("", ""), state.image)
    assertNull(state.localPhotoUri)
    assertEquals("", state.category)
    assertEquals("", state.type)
    assertEquals("", state.brand)
    assertEquals(0.0, state.price, 0.0)
    assertEquals(emptyList<Material>(), state.material)
    assertEquals("", state.materialText)
    assertEquals("", state.link)
    assertNull(state.errorMessage)
    assertNull(state.invalidPhotoMsg)
    assertNull(state.invalidCategory)
    assertEquals(emptyList<String>(), state.suggestions)
    assertFalse(state.isSaveSuccessful)
  }

  @Test
  fun `isEditValid returns true when all required fields are valid`() = runTest {
    val mockUri = mockk<Uri>()
    every { mockUri.toString() } returns "content://test"

    viewModel.setPhoto(mockUri)
    viewModel.setCategory("Clothing")

    advanceUntilIdle()

    val state = viewModel.uiState.value
    assertTrue(state.isEditValid)
  }

  @Test
  fun `isEditValid returns false when image is empty`() {
    viewModel.setCategory("Clothing")

    val state = viewModel.uiState.value
    assertFalse(state.isEditValid)
  }

  @Test
  fun `isEditValid returns false when category is empty`() {
    val mockUri = mockk<Uri>()
    every { mockUri.toString() } returns "content://test"
    viewModel.setPhoto(mockUri)

    val state = viewModel.uiState.value
    assertFalse(state.isEditValid)
  }

  @Test
  fun `setPhoto updates localPhotoUri in state`() = runTest {
    val mockUri = mockk<Uri>()
    every { mockUri.toString() } returns "content://test"

    viewModel.setPhoto(mockUri)

    advanceUntilIdle()

    val state = viewModel.uiState.value
    assertEquals(mockUri, state.localPhotoUri)
    assertEquals(ImageData("", ""), state.image)
    assertNull(state.invalidPhotoMsg)
  }

  @Test
  fun `setPhoto with Uri EMPTY sets error message`() = runTest {
    viewModel.setPhoto(Uri.EMPTY)

    advanceUntilIdle()

    val state = viewModel.uiState.value
    assertNull(state.localPhotoUri)
    assertEquals(ImageData("", ""), state.image)
    assertEquals("Please select a photo.", state.invalidPhotoMsg)
  }

  @Test
  fun `setCategory updates category in state`() {
    viewModel.setCategory("Clothing")

    val state = viewModel.uiState.value
    assertEquals("Clothing", state.category)
    assertNull(state.invalidCategory)
  }

  @Test
  fun `setCategory with empty string sets error message`() {
    viewModel.setCategory("")

    val state = viewModel.uiState.value
    assertEquals("", state.category)
    assertEquals("Please select a category.", state.invalidCategory)
  }

  @Test
  fun `setType updates type in state`() {
    viewModel.setType("T-shirt")

    val state = viewModel.uiState.value
    assertEquals("T-shirt", state.type)
  }

  @Test
  fun `setBrand updates brand in state`() {
    viewModel.setBrand("Nike")

    val state = viewModel.uiState.value
    assertEquals("Nike", state.brand)
  }

  @Test
  fun `setPrice updates price in state`() {
    viewModel.setPrice(49.99)

    val state = viewModel.uiState.value
    assertEquals(49.99, state.price, 0.0)
  }

  @Test
  fun `setMaterial updates material in state`() {
    viewModel.setMaterial("Cotton 80%, Wool 20%")

    val state = viewModel.uiState.value
    assertEquals("Cotton 80%, Wool 20%", state.materialText)
    assertEquals(2, state.material.size)
    assertEquals("Cotton", state.material[0].name)
    assertEquals(80.0, state.material[0].percentage, 0.0)
    assertEquals("Wool", state.material[1].name)
    assertEquals(20.0, state.material[1].percentage, 0.0)
  }

  @Test
  fun `setMaterial handles single material`() {
    viewModel.setMaterial("Cotton 100%")

    val state = viewModel.uiState.value
    assertEquals("Cotton 100%", state.materialText)
    assertEquals(1, state.material.size)
    assertEquals("Cotton", state.material[0].name)
    assertEquals(100.0, state.material[0].percentage, 0.0)
  }

  @Test
  fun `setMaterial handles invalid format`() {
    viewModel.setMaterial("Invalid Format")

    val state = viewModel.uiState.value
    assertEquals("Invalid Format", state.materialText)
    assertEquals(0, state.material.size)
  }

  @Test
  fun `setMaterial handles empty string`() {
    viewModel.setMaterial("")

    val state = viewModel.uiState.value
    assertEquals("", state.materialText)
    assertEquals(0, state.material.size)
  }

  @Test
  fun `setLink updates link in state`() {
    viewModel.setLink("https://example.com")

    val state = viewModel.uiState.value
    assertEquals("https://example.com", state.link)
  }

  @Test
  fun `setErrorMsg updates error message`() {
    viewModel.setErrorMsg("Test error")

    val state = viewModel.uiState.value
    assertEquals("Test error", state.errorMessage)
  }

  @Test
  fun `clearErrorMsg clears error message`() {
    viewModel.setErrorMsg("Test error")
    viewModel.clearErrorMsg()

    val state = viewModel.uiState.value
    assertNull(state.errorMessage)
  }

  @Test
  fun `loadItem populates state with item data`() {
    val materials = listOf(Material("Cotton", 100.0))
    val item =
        Item(
            itemUuid = "test-id",
            image = ImageData("test-image-id", "https://example.com/test.jpg"),
            category = "Clothing",
            type = "T-shirt",
            brand = "Nike",
            price = 49.99,
            material = materials,
            link = "https://example.com",
            ownerId = "ownerId")

    viewModel.loadItem(item)

    val state = viewModel.uiState.value
    assertEquals("test-id", state.itemId)
    assertEquals(ImageData("test-image-id", "https://example.com/test.jpg"), state.image)
    assertEquals("Clothing", state.category)
    assertEquals("T-shirt", state.type)
    assertEquals("Nike", state.brand)
    assertEquals(49.99, state.price, 0.0)
    assertEquals(materials, state.material)
    assertEquals("Cotton 100.0%", state.materialText)
    assertEquals("https://example.com", state.link)
  }

  @Test
  fun `loadItem handles null optional values`() {
    val item =
        Item(
            itemUuid = "test-id",
            image = ImageData("test-image-id", "https://example.com/test.jpg"),
            category = "Clothing",
            type = null,
            brand = null,
            price = null,
            material = emptyList(),
            link = null,
            ownerId = "ownerId")

    viewModel.loadItem(item)

    val state = viewModel.uiState.value
    assertEquals("test-id", state.itemId)
    assertEquals(ImageData("test-image-id", "https://example.com/test.jpg"), state.image)
    assertEquals("Clothing", state.category)
    assertEquals("", state.type)
    assertEquals("", state.brand)
    assertEquals(0.0, state.price, 0.0)
    assertEquals("", state.materialText)
    assertEquals("", state.link)
  }

  @Test
  fun `onSaveItemClick sets error when validation fails`() = runTest {
    viewModel.onSaveItemClick()

    advanceUntilIdle()

    val state = viewModel.uiState.value
    assertEquals("Please fill in all required fields.", state.errorMessage)
    assertFalse(state.isSaveSuccessful)
  }

  @Test
  fun `onSaveItemClick sets error when URL is invalid`() = runTest {
    val mockUri = mockk<Uri>()
    every { mockUri.toString() } returns "content://test"

    viewModel.setPhoto(mockUri)
    viewModel.setCategory("Clothing")
    viewModel.setLink("invalid-url")

    viewModel.onSaveItemClick()

    advanceUntilIdle()

    val state = viewModel.uiState.value
    assertEquals("Please enter a valid URL.", state.errorMessage)
  }

  @Test
  fun `onSaveItemClick returns true and calls repository when valid`() = runTest {
    val mockUri = mockk<Uri>()
    every { mockUri.toString() } returns "content://test"

    coEvery { mockRepository.editItem(any(), any()) } returns Unit

    // Load an item first to set itemId
    viewModel.loadItem(
        Item(
            itemUuid = "test-id",
            image = ImageData("test-image-id", "https://example.com/test.jpg"),
            category = "Clothing",
            type = "T-shirt",
            brand = "Nike",
            price = 49.99,
            material = emptyList(),
            link = "https://example.com",
            ownerId = "ownerId"))

    viewModel.onSaveItemClick()
    advanceUntilIdle()

    coVerify { mockRepository.editItem("test-id", any()) }
    assertNull(viewModel.uiState.value.errorMessage)
    assertTrue(viewModel.uiState.value.isSaveSuccessful)
  }

  @Test
  fun `onSaveItemClick allows empty link`() = runTest {
    coEvery { mockRepository.editItem(any(), any()) } returns Unit

    viewModel.loadItem(
        Item(
            itemUuid = "test-id",
            image = ImageData("test-image-id", "https://example.com/test.jpg"),
            category = "Clothing",
            type = "T-shirt",
            brand = "Nike",
            price = 49.99,
            material = emptyList(),
            link = "",
            ownerId = "ownerId"))

    viewModel.onSaveItemClick()
    advanceUntilIdle()

    coVerify { mockRepository.editItem("test-id", any()) }
    assertNull(viewModel.uiState.value.errorMessage)
    assertTrue(viewModel.uiState.value.isSaveSuccessful)
  }

  @Test
  fun `onSaveItemClick handles exception`() = runTest {
    coEvery { mockRepository.editItem(any(), any()) } throws Exception("Update failed")

    viewModel.loadItem(
        Item(
            itemUuid = "test-id",
            image = ImageData("test-image-id", "https://example.com/test.jpg"),
            category = "Clothing",
            type = "T-shirt",
            brand = "Nike",
            price = 49.99,
            material = emptyList(),
            link = "https://example.com",
            ownerId = "ownerId"))

    viewModel.onSaveItemClick()

    advanceUntilIdle()

    val state = viewModel.uiState.value
    assertEquals("Failed to update item: Update failed", state.errorMessage)
  }

  @Test
  fun `deleteItem calls repository when itemId is not empty`() = runTest {
    mockkObject(FirebaseImageUploader)
    coEvery { FirebaseImageUploader.deleteImage(any()) } returns true

    viewModel.loadItem(
        Item(
            itemUuid = "test-id",
            image = ImageData("test-image-id", "https://example.com/test.jpg"),
            category = "Clothing",
            type = null,
            brand = null,
            price = null,
            material = emptyList(),
            link = null,
            ownerId = "ownerId"))
    viewModel.deleteItem()

    advanceUntilIdle()

    coVerify { mockRepository.deleteItem("test-id") }
    val state = viewModel.uiState.value
    assertTrue(state.isDeleteSuccessful)
    assertNull(state.errorMessage)
  }

  @Test
  fun `deleteItem does not call repository when itemId is empty`() = runTest {
    viewModel.deleteItem()

    advanceUntilIdle()

    coVerify(exactly = 0) { mockRepository.deleteItem(any()) }
    val state = viewModel.uiState.value
    assertEquals("No item to delete.", state.errorMessage)
  }

  @Test
  fun `deleteItem handles exception`() = runTest {
    coEvery { mockRepository.deleteItem(any()) } throws Exception("Delete failed")

    viewModel.loadItem(
        Item(
            itemUuid = "test-id",
            image = ImageData("test-image-id", "https://example.com/test.jpg"),
            category = "Clothing",
            type = null,
            brand = null,
            price = null,
            material = emptyList(),
            link = null,
            ownerId = "ownerId"))
    viewModel.deleteItem()

    advanceUntilIdle()

    val state = viewModel.uiState.value
    assertEquals("Failed to delete item: Delete failed", state.errorMessage)
  }

  @Test
  fun `initTypeSuggestions loads suggestions from context`() {
    val context = ApplicationProvider.getApplicationContext<Context>()

    viewModel.initTypeSuggestions(context)

    // After initialization, suggestions should be available
    viewModel.setCategory("Clothing")
    viewModel.updateTypeSuggestions("")

    val state = viewModel.uiState.value
    assertTrue(state.suggestions.isNotEmpty())
  }

  @Test
  fun `updateTypeSuggestions filters by input`() {
    val context = ApplicationProvider.getApplicationContext<Context>()
    viewModel.initTypeSuggestions(context)

    viewModel.setCategory("Clothing")
    viewModel.updateTypeSuggestions("T")

    val state = viewModel.uiState.value
    assertTrue(state.suggestions.all { it.startsWith("T", ignoreCase = true) })
  }

  @Test
  fun `updateTypeSuggestions returns all suggestions when input is blank`() {
    val context = ApplicationProvider.getApplicationContext<Context>()
    viewModel.initTypeSuggestions(context)

    viewModel.setCategory("Clothing")
    viewModel.updateTypeSuggestions("")

    val state = viewModel.uiState.value
    assertTrue(state.suggestions.isNotEmpty())
  }

  @Test
  fun `updateTypeSuggestions normalizes category names - Clothes`() {
    val context = ApplicationProvider.getApplicationContext<Context>()
    viewModel.initTypeSuggestions(context)

    viewModel.setCategory("Clothes")
    viewModel.updateTypeSuggestions("")

    val state = viewModel.uiState.value
    assertTrue(state.suggestions.isNotEmpty())
  }

  @Test
  fun `updateTypeSuggestions normalizes category names - clothing`() {
    val context = ApplicationProvider.getApplicationContext<Context>()
    viewModel.initTypeSuggestions(context)

    viewModel.setCategory("clothing")
    viewModel.updateTypeSuggestions("")

    val state = viewModel.uiState.value
    assertTrue(state.suggestions.isNotEmpty())
  }

  @Test
  fun `updateTypeSuggestions normalizes category names - Shoes`() {
    val context = ApplicationProvider.getApplicationContext<Context>()
    viewModel.initTypeSuggestions(context)

    viewModel.setCategory("Shoes")
    viewModel.updateTypeSuggestions("")

    val state = viewModel.uiState.value
    assertTrue(state.suggestions.isNotEmpty())
  }

  @Test
  fun `updateTypeSuggestions normalizes category names - shoe`() {
    val context = ApplicationProvider.getApplicationContext<Context>()
    viewModel.initTypeSuggestions(context)

    viewModel.setCategory("shoe")
    viewModel.updateTypeSuggestions("")

    val state = viewModel.uiState.value
    assertTrue(state.suggestions.isNotEmpty())
  }

  @Test
  fun `updateTypeSuggestions normalizes category names - Bags`() {
    val context = ApplicationProvider.getApplicationContext<Context>()
    viewModel.initTypeSuggestions(context)

    viewModel.setCategory("Bags")
    viewModel.updateTypeSuggestions("")

    val state = viewModel.uiState.value
    assertTrue(state.suggestions.isNotEmpty())
  }

  @Test
  fun `updateTypeSuggestions normalizes category names - bag`() {
    val context = ApplicationProvider.getApplicationContext<Context>()
    viewModel.initTypeSuggestions(context)

    viewModel.setCategory("bag")
    viewModel.updateTypeSuggestions("")

    val state = viewModel.uiState.value
    assertTrue(state.suggestions.isNotEmpty())
  }

  @Test
  fun `updateTypeSuggestions normalizes category names - Accessories`() {
    val context = ApplicationProvider.getApplicationContext<Context>()
    viewModel.initTypeSuggestions(context)

    viewModel.setCategory("Accessories")
    viewModel.updateTypeSuggestions("")

    val state = viewModel.uiState.value
    assertTrue(state.suggestions.isNotEmpty())
  }

  @Test
  fun `updateTypeSuggestions normalizes category names - accessory`() {
    val context = ApplicationProvider.getApplicationContext<Context>()
    viewModel.initTypeSuggestions(context)

    viewModel.setCategory("accessory")
    viewModel.updateTypeSuggestions("")

    val state = viewModel.uiState.value
    assertTrue(state.suggestions.isNotEmpty())
  }

  @Test
  fun `updateTypeSuggestions returns empty list for invalid category`() {
    val context = ApplicationProvider.getApplicationContext<Context>()
    viewModel.initTypeSuggestions(context)

    viewModel.setCategory("InvalidCategory")
    viewModel.updateTypeSuggestions("")

    val state = viewModel.uiState.value
    assertTrue(state.suggestions.isEmpty())
  }

  @Test
  fun `updateTypeSuggestions filters case insensitive`() {
    val context = ApplicationProvider.getApplicationContext<Context>()
    viewModel.initTypeSuggestions(context)

    viewModel.setCategory("Clothing")
    viewModel.updateTypeSuggestions("t-shirt")

    val state = viewModel.uiState.value
    assertTrue(state.suggestions.any { it.equals("T-shirt", ignoreCase = true) })
  }
}
