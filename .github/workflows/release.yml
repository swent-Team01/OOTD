# .github/workflows/build-on-release.yml
name: Build Android APK on Release

on:
  release:
    types: [published, prereleased]
  workflow_dispatch:

jobs:
  build-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write   # needed to upload release assets

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v2
      
      - name: CI Banner                            
        run: |
          echo '             _      _    ___  ______ _   __'
          echo '            | |    | |  / _ \ | ___ \ | / /'
          echo '  ___   ___ | |_ __| | / /_\ \| |_/ / |/ / '
          echo ' / _ \ / _ \| __/ _` | |  _  ||  __/|    \'
          echo '| (_) | (_) | || (_| | | | | || |   | |\  \'
          echo ' \___/ \___/ \__\__,_| \_| |_/\_|   \_| \_/'

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Decode signing and optional files
        shell: bash
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          bash .github/scripts/setup-android-signing.sh
          echo "ANDROID_KEYSTORE_PATH=$GITHUB_WORKSPACE/.ci-secrets/release.keystore" >> $GITHUB_ENV

      - name: Decode secrets for FireBase
        env:
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
        run: |
          if [ -z "$GOOGLE_SERVICES" ]; then
            echo "::error::GOOGLE_SERVICES secret is not set! Cannot build release without Firebase configuration."
            echo "Please set the GOOGLE_SERVICES secret in your repository settings."
            echo "To create it, run: base64 -i app/google-services.json | pbcopy"
            exit 1
          fi
          echo "Decoding google-services.json..."
          echo "$GOOGLE_SERVICES" | base64 --decode > ./app/google-services.json
          
          # Verify the file was created successfully
          if [ ! -f ./app/google-services.json ]; then
            echo "::error::Failed to create google-services.json file"
            exit 1
          fi
          
          echo "âœ“ google-services.json decoded successfully"
          ls -lh ./app/google-services.json

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Clean
        run: ./gradlew clean

      - name: Build signed Release APK
        env:
          ANDROID_KEYSTORE_PATH: ${{ env.ANDROID_KEYSTORE_PATH }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: ./gradlew :app:assembleRelease --stacktrace

      - name: Build Play Store AAB
        if: ${{ true }} # We can flip it to False later on if we dont want it anymore
        env:
          ANDROID_KEYSTORE_PATH: ${{ env.ANDROID_KEYSTORE_PATH }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: ./gradlew :app:bundleRelease --stacktrace

      - name: Locate artifacts
        id: locate
        run: |
          APK_PATH=$(find app/build/outputs/apk/release -name "*.apk" -type f | head -n1)
          AAB_PATH=$(find app/build/outputs/bundle/release -name "*.aab" -type f | head -n1 || true)
          if [[ -z "$APK_PATH" ]]; then
            echo "No APK found!" >&2
            exit 1
          fi
          echo "apk=$APK_PATH" >> $GITHUB_OUTPUT
          if [[ -n "$AAB_PATH" ]]; then
            echo "aab=$AAB_PATH" >> $GITHUB_OUTPUT
          fi
          echo "Found APK: $APK_PATH"
          if [[ -n "$AAB_PATH" ]]; then echo "Found AAB: $AAB_PATH"; fi

      - name: Upload APK to Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ steps.locate.outputs.apk }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload AAB to Release
        if: ${{ steps.locate.outputs.aab != '' }}
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ steps.locate.outputs.aab }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
