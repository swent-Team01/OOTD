name: CI - Test Runner

# Run the workflow when commits are pushed on main or when a PR is modified
on:
  push:
    branches:
      - main

  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  ci:
    name: CI
    # Execute the CI on the course's runners
    runs-on: ubuntu-latest

    steps:
      # First step : Checkout the repository on the runner
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of Sonar analysis (if we use Sonar Later)

      - name: CI Banner
        run: |
          echo '   ___   ___ _____ ___     ___ ___ '
          echo '  / _ \ / _ \_   _|   \   / __|_ _|'
          echo ' | (_) | (_) || | | |) | | (__ | | '
          echo '  \___/ \___/ |_| |___/   \___|___|'
          echo '                                   '

      # Setup all tools in parallel-friendly order
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      # Install NodeJS early for Firebase CLI
      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 22

      # Kernel-based Virtual Machine (KVM) is an open source virtualization technology built into Linux. Enabling it allows the Android emulator to run faster.
      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      # Caching is a very useful part of a CI, as a workflow is executed in a clean environment every time,
      # this means that one would need to re-download and re-process gradle files for every run. Which is very time consuming.
      #
      # To avoid that, we cache the the gradle folder to reuse it later.
      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      # Cache SonarQube packages
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Load google-services.json from the secrets to initiate the FireBase
      - name: Decode secrets for FireBase
        env:
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
        run: |
          if [ -n "$GOOGLE_SERVICES" ]; then
            echo "$GOOGLE_SERVICES" | base64 --decode > ./app/google-services.json
          else
            echo "::warning::GOOGLE_SERVICES secret is not set !"
          fi

      - name: Grant execute permission for gradlew
        run: |
          chmod +x ./gradlew

      # Install Firebase CLI
      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      # Check formatting FIRST - fail fast if code isn't formatted
      - name: KTFmt Check
        run: |
          ./gradlew ktfmtCheck

      # Start Firebase emulators in background while we build
      - name: Start Firebase emulators for testing
        run: |
          if [ -e "firebase.json" ] && jq -e '.emulators' firebase.json >/dev/null; then
            echo "Starting Firebase emulators for Firestore tests..."
            firebase emulators:start --only auth,firestore, storage --project demo-project &
            sleep 10  # Give emulators time to start
            echo "Firebase emulators started"
          else
            echo "Firebase emulators not configured, skipping emulator startup..."
          fi

      # Combine assemble and unit tests in single gradle invocation
      - name: Build and Run Unit Tests
        run: |
          # To run the CI with debug information, add --info
          ./gradlew assemble check lint --parallel --build-cache

      # FireStore Security rules Test
      - name: Firestore Security Rules tests
        run: |
          if [ ! -e "firebase.json" ]; then # Check if firebase.json exists
            echo "Warning: 'firebase.json' file is missing. Check with the team to properly set up the Firebase"
            exit 0
          fi
          jq -e '.emulators' firebase.json >/dev/null || { # Check if emulators are configured
            echo "'firebase.json' is missing 'emulators'. Run 'firebase emulators:init'."
            exit 1
          }
          for e in auth firestore; do # Check if auth and firestore emulators are configured
            jq -e ".emulators.$e" firebase.json >/dev/null || {
              echo "'firebase.json' is missing 'emulators.$e'. Run 'firebase emulators:init'."
              exit 1
            }
          done
          if [ -e "firebase/firestore/firestore.rules" ]; then # Check if firestore.rules exists
            # Check if firestore.rules is referenced in firebase.json
            jq -e '.firestore.rules' firebase.json >/dev/null || {
              echo "'firebase.json' is missing 'firestore.rules'."
              exit 1
            }
            (cd firebase/firestore/tests 2>/dev/null && npm install && npm test) || exit $?
          else
            echo "Warning: Firestore rules file not found in firebase/firestore"
          fi
         
      # Cache the Emulator AFTER we know build succeeds, if the cache does not hit, create the emulator
      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-35

      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 35
          target: google_apis
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      # Run connected tests on the emulator
      - name: Run Instrumented Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 35
          target: google_apis
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: ./gradlew connectedCheck --parallel --build-cache

      # This step generates the coverage report which will be uploaded to sonar
      - name: Generate Coverage Report
        run: |
          ./gradlew jacocoTestReport

      # Upload the various reports to sonar
      - name: Upload report to SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonar --parallel --build-cache