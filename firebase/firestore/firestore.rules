rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthed() {
      return request.auth != null;
    }

    // Mutual friendship check using friendUids lists on both users
    function isFriend(viewerUid, authorUid) {
      // Paths
      let viewerPath = /databases/$(database)/documents/users/$(viewerUid);
      let authorPath = /databases/$(database)/documents/users/$(authorUid);

      return exists(viewerPath) && exists(authorPath)
        && get(viewerPath).data.keys().hasAny(['friendUids'])
        && (authorUid in get(viewerPath).data.friendUids);
    }

    // Users: read any, write own
    match /users/{userId} {
      allow read: if true;
      allow write: if true;
    }

    // Accounts: only owner can read/update, authenticated users can create
    match /accounts/{accountId} {
      allow read: if isAuthed() && accountId == request.auth.uid;
      allow create: if isAuthed()
        && accountId == request.auth.uid;
      allow update, delete: if isAuthed() && accountId == request.auth.uid;
    }

    // Posts: readable by author or mutual friends
    match /outfit_posts/{postId} {
      allow read: if isAuthed() &&
                  (resource == null || resource.data.ownerId == request.auth.uid ||
                   isFriend(request.auth.uid, resource.data.ownerId));

      allow create: if isAuthed()
        && request.resource.data.ownerId == request.auth.uid;

      allow update: if isAuthed()
                 && resource.data.ownerId == request.auth.uid;

      allow delete: if isAuthed()
             && (resource == null || resource.data.ownerId == request.auth.uid);

    }

    // Posts: readable by author or mutual friends
    match /posts/{postId} {
      allow read: if isAuthed() &&
                              (resource == null || resource.data.ownerId == request.auth.uid);
    allow create: if isAuthed()
        && request.resource.data.ownerId == request.auth.uid;

    allow update: if isAuthed()
           && resource.data.ownerId == request.auth.uid;

    allow delete: if isAuthed()
           && (resource == null || resource.data.ownerId == request.auth.uid);

    }

    match /items/{itemId} {
      allow read: if isAuthed() &&
                        (resource == null || resource.data.ownerId == request.auth.uid);

      allow create: if isAuthed()
          && request.resource.data.ownerId == request.auth.uid;

      allow update: if isAuthed()
             && resource.data.ownerId == request.auth.uid;

      allow delete: if isAuthed()
             && (resource == null || resource.data.ownerId == request.auth.uid);
    }

    // Default deny for documents except items
    match /{document=**} {
      allow read, write: if false;
    }
  }
}